package org.rti.ttfinder.wrapper;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.os.SystemClock;
import android.os.Trace;
import android.util.Log;

import org.tensorflow.lite.support.common.TensorProcessor;
import org.tensorflow.lite.support.label.TensorLabel;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

import static java.lang.Math.min;

public class TTClassifierInterpreter extends TTInterpreter{

    /** Labels corresponding to the output of the vision model. */
    private List<String> labels;
    private static final int MAX_RESULTS = 1; //This will probably change in future implementations
    private List<Recognition> topKResults = null;

    @Override
    protected String getModelPath() {  return "prediction.tflite"; }

    @Override
    public boolean runInference(Bitmap bitmap) {
        Log.v(TAG, "Cannot run inference on Bitmap for classification");
        return false;
    }

    /** An immutable result returned by a Classifier describing what was recognized. */
    public static class Recognition {
        /** Display name for the recognition. */
        private final String title;

        /** Likeliness of the recognition */
        private final String likeliness;

        /**
         * A sortable score for how good the recognition is relative to others. Higher should be better.
         */
        private final Float confidence; //this is really, a weight generated by classifier


        public Recognition(
                final String title, final Float confidence) {
            this.title = title;
            this.confidence = confidence;
            if(confidence >= 0.9) {
                likeliness = "Certain";
            }
            else if(confidence  >= 0.75) {
                likeliness = "Almost Certain";
            }
            else if(confidence >= 0.55) {
                likeliness = "Likely";
            }
            else
            {
                likeliness = "Unlikely";
            }
        }

        public String getTitle() {
            return title;
        }

        public Float getConfidence() {
            return confidence;
        }

        @Override
        public String toString() {
            String resultString = "";

            if (title != null) {
                resultString += title;
            }

            if (confidence != null) {
                resultString += " :: " + String.format("%.2f", confidence);
                //resultString += " :: " + likeliness; // removing likeliness text for now
            }

            return resultString.trim();
        }
    }

    public boolean runInference(ByteBuffer featureBuffer) {

        lastInferenceDetails.setLength(0);
        lastInferenceTimeCost = 0;
        topKResults = null;

        // Logs this method so that it can be analyzed with systrace.
        Trace.beginSection("ClassifyInputFeatures");

        // Runs the inference call.
        Trace.beginSection("runInference");
        long startTimeForReference = SystemClock.uptimeMillis();
        tflite.run(featureBuffer, outputBuffer.getBuffer().rewind());
        long endTimeForReference = SystemClock.uptimeMillis();
        Trace.endSection();
        logSectionTimeCost("runInference", (endTimeForReference - startTimeForReference));

        Trace.beginSection("runPostProcessing");
        long startTimeForPostProcessing = SystemClock.uptimeMillis();
        Log.v(TAG, "Output buffer shape is: ");
        for (int k=0; k<outputBuffer.getShape().length; k++)
        {
            Log.v(TAG, ""+outputBuffer.getShape()[k]);
        }

        //TensorProcessor probabilityProcessor = new TensorProcessor.Builder().add(getPostprocessNormalizeOp()).build();
        TensorProcessor probabilityProcessor = new TensorProcessor.Builder().build();
        Map<String, Float> labeledProbability =
                new TensorLabel(labels, probabilityProcessor.process(outputBuffer))
                        .getMapWithFloatValue();
        long endTimeForPostProcessing = SystemClock.uptimeMillis();
        Trace.endSection();
        logSectionTimeCost("runPostProcessing", (endTimeForPostProcessing - startTimeForPostProcessing));

        String msg = "";
        for (Map.Entry<String, Float> entry : labeledProbability.entrySet()) {
            Log.v(TAG, "Weights for label " + entry.getKey() + " :: " + entry.getValue() + "\n");
            msg =  msg + "Weights for label " + entry.getKey() + " :: " + entry.getValue() + "\n";
        }
        updateLastInferenceRunDetails(msg);
        topKResults = getTopKProbability(labeledProbability);
        Trace.endSection();
        updateLastInferenceRunDetails("Time cost for classification  :: " + lastInferenceTimeCost + "ms");

        return true;
    }

    /** Gets the top-k results. */
    private static List<Recognition> getTopKProbability(Map<String, Float> labelProb) {
        // Find the best classifications.
        PriorityQueue<Recognition> pq =
                new PriorityQueue<>(
                        MAX_RESULTS,
                        new Comparator<Recognition>() {
                            @Override
                            public int compare(Recognition lhs, Recognition rhs) {
                                // Intentionally reversed to put high confidence at the head of the queue.
                                return Float.compare(rhs.getConfidence(), lhs.getConfidence());
                            }
                        });

        for (Map.Entry<String, Float> entry : labelProb.entrySet()) {
            pq.add(new Recognition(entry.getKey(), entry.getValue()));
        }

        final ArrayList<Recognition> recognitions = new ArrayList<>();
        int recognitionsSize = min(pq.size(), MAX_RESULTS);
        for (int i = 0; i < recognitionsSize; ++i) {
            recognitions.add(pq.poll());
        }
        return recognitions;
    }

    public List<Recognition> getTopKResults() {
        return topKResults;
    }

    /**
     * Initializes a {@code TTSegmentInterpreter}.
     *
     * @param activity
     */
    public TTClassifierInterpreter(Context activity, Device device, int numThreads)
            throws IOException {
        super(activity, device, numThreads, true);
        labels = new ArrayList<>();
        labels.add("Healthy");
        labels.add("TT");
        TAG ="TTClassifierInterpreter";
    }

}
